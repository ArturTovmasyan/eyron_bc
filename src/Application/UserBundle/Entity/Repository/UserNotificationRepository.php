<?php

namespace Application\UserBundle\Entity\Repository;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserNotificationRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $userId
     * @param $first
     * @param $count
     * @param null $lastId
     * @param bool|false $getLastModified
     * @return array
     */
    public function getUserNotifications($userId, $first, $count, $lastId = null, $getLastModified = false)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->from('ApplicationUserBundle:UserNotification', 'un')
            ->where('un.user = :userId')
            ->orderBy('un.created', 'DESC')
            ->setParameter('userId', $userId)
            ->setFirstResult($first)
            ->setMaxResults($count);


        if ($lastId){
            if ($lastId > 0){
                $query
                    ->andWhere('un.id < :lastId')
                    ->setParameter('lastId', $lastId)
                ;
            }
            else {
                $query
                    ->andWhere('un.id > :lastId')
                    ->setParameter('lastId', -1 * $lastId)
                ;
            }
        }

        if ($getLastModified){
            $data = $query
                ->select('un.id, un.updated')
                ->orderBy('un.created', 'DESC')
                ->getQuery()
                ->getResult();

            if (count($data) == 0){
                return null;
            }

            $lastUpdated = null;

            $etag = '';
            foreach($data as $d){
                $lastUpdated = $d['updated'] > $lastUpdated ? $d['updated'] : $lastUpdated;
                $etag .= '_' . $d['id'];
            }

            return ['lastModified' => $lastUpdated, 'etag' => md5($etag)];
        }

        $query
            ->select('un, n')
            ->join('un.notification', 'n');


        return $query->getQuery()->getResult();
    }

    /**
     * @param $userId
     * @return mixed
     */
    public function setAsReadAllNotifications($userId)
    {
        return $this->getEntityManager()
            ->createQuery("UPDATE ApplicationUserBundle:UserNotification un
                           SET un.isRead = true, un.updated = :currDate
                           WHERE un.user = :userId")
            ->setParameter('userId', $userId)
            ->setParameter('currDate', new \DateTime())
            ->execute();
    }

    /**
     * @param $id
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findUserNotification($id)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT un, n, uns
                           FROM ApplicationUserBundle:UserNotification un
                           JOIN un.notification n
                           LEFT JOIN n.userNotifications uns
                           WHERE un.id = :id")
            ->setParameter('id', $id)
            ->getOneOrNullResult();
    }

    /**
     * @param $userId
     * @return mixed
     */
    public function getUnreadCount($userId)
    {
        return  $this->getEntityManager()
            ->createQuery("SELECT COUNT(un.id)
                           FROM ApplicationUserBundle:UserNotification un
                           WHERE un.user = :userId AND un.isRead = false")
            ->setParameter('userId', $userId)
            ->getSingleScalarResult();
    }
}
