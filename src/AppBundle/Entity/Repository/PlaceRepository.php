<?php

namespace AppBundle\Entity\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * PlaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaceRepository extends EntityRepository
{
    /**
     * This function is used to get all places by goal ids
     *
     * @param $goalIds array
     * @return array
     */
    public function findPlaceByGoalIds($goalIds)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT DISTINCT p
                           FROM AppBundle:Place p
                           JOIN p.goal g
                           WHERE g.id in (:goalIds)")
            ->setParameter('goalIds', $goalIds)
            ->getResult();
    }

    /**
     * This function is used to get all places by ids and related status
     *
     * @param $placesIds array
     * @param $userId integer
     * @return array
     */
    public function findAllByIds($placesIds, $userId)
    {
        return $this->getEntityManager()
//            ->createQuery("SELECT p, (CASE WHEN ur.id = :userId THEN 1 ELSE 0 END) AS related
            ->createQuery("SELECT p, up, ur
                           FROM AppBundle:Place p
                           LEFT JOIN p.userPlace up
                           LEFT JOIN up.user ur
                           WHERE p.id in (:placesIds)
                           ")
//            ->setParameter('userId', $userId)
            ->setParameter('placesIds', $placesIds)
            ->getResult();
    }

    /**
     * This function is used to get all place in bounds by latitude and longitude
     *
     * @param $latitude
     * @param $longitude
     * @return array
     */
    public function findAllByBounds($latitude, $longitude)
    {

        return $this->getEntityManager()
            ->createQuery("SELECT  p.id, pt.name as place_type
                           FROM AppBundle:Place p
                           JOIN p.placeType pt
                           WHERE (:latitude BETWEEN p.minLatitude AND p.maxLatitude) and
                                 (( :longitude BETWEEN p.minLongitude AND p.maxLongitude ) OR
                                  (:negativeLng BETWEEN p.minLongitude AND p.maxLongitude ))
                           ")
            ->setParameter('latitude', $latitude)
            ->setParameter('negativeLng', $longitude + 360)
            ->setParameter('longitude', $longitude)
            ->getResult();
    }

    /**
     * @param $names
     * @return array
     */
    public function findIdNameByName($names)
    {

        return $this->getEntityManager()
            ->createQuery("SELECT  p.id, p.name
                           FROM AppBundle:Place p
                           WHERE p.name in (:n)
                           ")
            ->setParameter('n', $names)
            ->getResult();
    }
}
